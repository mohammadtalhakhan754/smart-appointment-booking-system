spring:
  application:
    name: smart-appointment-booking-system

  profiles:
    active: dev

  datasource:
    url: jdbc:postgresql://localhost:5432/appointmentdb
    username: appointment_user
    password: appointment_pass
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 10
      minimum-idle: 5
      connection-timeout: 30000

  jpa:
    hibernate:
      ddl-auto: none
    show-sql: true
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
        use_sql_comments: true
        jdbc:
          batch_size: 20
    open-in-view: true
  mail:
    host: smtp.gmail.com
    port: 587
    username: fayz16456@gmail.com      # ✅ Replace with your Gmail
    password: vdzh wout odan kzbq         # ✅ See Step 3 for how to get this
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          connectiontimeout: 5000
          timeout: 5000
          writetimeout: 5000
    default-encoding: UTF-8

  flyway:
    enabled: true
    locations: classpath:db/migration
    baseline-on-migrate: true
    validate-on-migrate: true

  data:
    redis:
      host: localhost
      port: 6379
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0

  rabbitmq:
    host: localhost
    port: 5672
    username: appointment_user
    password: appointment_pass
    listener:
      simple:
        retry:
          enabled: true
          max-attempts: 3
          initial-interval: 1000ms

  cache:
    type: redis
    redis:
      time-to-live: 600000
      cache-null-values: false

# JWT Configuration
app:
  email:
    from: fayz16456@gmail.com          # ✅ Sender email
    from-name: Smart Appointment System
    enabled: true

  jwt:
    secret: YgbHrVf3mC0kUos+tQNoTk67YbLa3tC+I7FV+Q8Gg/4opjcPTRbZh6KevaZdBXOhsmrHowIGuPe23EzRGriOlQ==
    expiration: 86400000
    refresh-expiration: 604800000

  rate-limiting:
    enabled: true
    requests-per-minute: 200

# Server Configuration
server:
  port: 8080
  error:
    include-message: always
    include-binding-errors: always

# Management/Actuator
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,prometheus
      base-path: /actuator
  endpoint:
    health:
      show-details: when-authorized
      probes:
        enabled: true
  metrics:
    export:
      prometheus:
        enabled: true

# Logging
logging:
  level:
    com.appointment.system: DEBUG
    org.springframework.security: DEBUG
    org.springframework.web: INFO
    org.hibernate.SQL: DEBUG
    org.hibernate.type.descriptor.sql.BasicBinder: TRACE
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"

# Swagger/OpenAPI
springdoc:
  api-docs:
    path: /v3/api-docs
  swagger-ui:
    path: /swagger-ui.html
    try-it-out-enabled: true
    operations-sorter: method
    tags-sorter: alpha
